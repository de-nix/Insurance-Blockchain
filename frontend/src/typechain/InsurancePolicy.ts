/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace InsurancePolicy {
  export type ClaimStruct = {
    id: BigNumberish;
    policyId: BigNumberish;
    policyName: string;
    description: string;
    amount: BigNumberish;
    isAccepted: boolean;
    isAnswered: boolean;
  };

  export type ClaimStructOutput = [
    id: bigint,
    policyId: bigint,
    policyName: string,
    description: string,
    amount: bigint,
    isAccepted: boolean,
    isAnswered: boolean
  ] & {
    id: bigint;
    policyId: bigint;
    policyName: string;
    description: string;
    amount: bigint;
    isAccepted: boolean;
    isAnswered: boolean;
  };

  export type PolicyStruct = {
    id: BigNumberish;
    policyName: string;
    insurer: AddressLike;
    insured: AddressLike;
    coverageAmount: BigNumberish;
    premium: BigNumberish;
    duration: BigNumberish;
    creationTime: BigNumberish;
    isAnswered: boolean;
    isAccepted: boolean;
    premiumDueDate: BigNumberish;
    period: BigNumberish;
  };

  export type PolicyStructOutput = [
    id: bigint,
    policyName: string,
    insurer: string,
    insured: string,
    coverageAmount: bigint,
    premium: bigint,
    duration: bigint,
    creationTime: bigint,
    isAnswered: boolean,
    isAccepted: boolean,
    premiumDueDate: bigint,
    period: bigint
  ] & {
    id: bigint;
    policyName: string;
    insurer: string;
    insured: string;
    coverageAmount: bigint;
    premium: bigint;
    duration: bigint;
    creationTime: bigint;
    isAnswered: boolean;
    isAccepted: boolean;
    premiumDueDate: bigint;
    period: bigint;
  };
}

export interface InsurancePolicyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAndPayClaim"
      | "acceptPolicy"
      | "createPolicy"
      | "denyClaim"
      | "denyPolicy"
      | "fileClaim"
      | "getAllClaimsForAddress"
      | "getAllPoliciesForAddress"
      | "getPolicy"
      | "getPolicyCount"
      | "payPremium"
      | "policies"
      | "policyClaimCounters"
      | "policyClaims"
      | "policyCounter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimAccepted"
      | "ClaimDenied"
      | "ClaimFiled"
      | "ClaimPaid"
      | "PolicyAccepted"
      | "PolicyCreated"
      | "PolicyDenied"
      | "PremiumPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAndPayClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptPolicy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "denyClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "denyPolicy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fileClaim",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllClaimsForAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPoliciesForAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyClaimCounters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyClaims",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyCounter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAndPayClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "denyClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "denyPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fileClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllClaimsForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPoliciesForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payPremium", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyClaimCounters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyCounter",
    data: BytesLike
  ): Result;
}

export namespace ClaimAcceptedEvent {
  export type InputTuple = [policyId: BigNumberish, claimId: BigNumberish];
  export type OutputTuple = [policyId: bigint, claimId: bigint];
  export interface OutputObject {
    policyId: bigint;
    claimId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimDeniedEvent {
  export type InputTuple = [policyId: BigNumberish, claimId: BigNumberish];
  export type OutputTuple = [policyId: bigint, claimId: bigint];
  export interface OutputObject {
    policyId: bigint;
    claimId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFiledEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    policyId: BigNumberish,
    description: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    claimId: bigint,
    policyId: bigint,
    description: string,
    amount: bigint
  ];
  export interface OutputObject {
    claimId: bigint;
    policyId: bigint;
    description: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimPaidEvent {
  export type InputTuple = [policyId: BigNumberish, claimId: BigNumberish];
  export type OutputTuple = [policyId: bigint, claimId: bigint];
  export interface OutputObject {
    policyId: bigint;
    claimId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyAcceptedEvent {
  export type InputTuple = [policyId: BigNumberish];
  export type OutputTuple = [policyId: bigint];
  export interface OutputObject {
    policyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    policyName: string,
    insurer: AddressLike,
    insured: AddressLike,
    policyCount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    policyName: string,
    insurer: string,
    insured: string,
    policyCount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    policyName: string;
    insurer: string;
    insured: string;
    policyCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyDeniedEvent {
  export type InputTuple = [policyId: BigNumberish];
  export type OutputTuple = [policyId: bigint];
  export interface OutputObject {
    policyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumPaidEvent {
  export type InputTuple = [policyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [policyId: bigint, amount: bigint];
  export interface OutputObject {
    policyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InsurancePolicy extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: InsurancePolicyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAndPayClaim: TypedContractMethod<
    [policyId: BigNumberish, claimId: BigNumberish],
    [void],
    "payable"
  >;

  acceptPolicy: TypedContractMethod<
    [policyId: BigNumberish],
    [void],
    "payable"
  >;

  createPolicy: TypedContractMethod<
    [
      policyName: string,
      coverageAmount: BigNumberish,
      premium: BigNumberish,
      duration: BigNumberish,
      period: BigNumberish,
      insuredAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  denyClaim: TypedContractMethod<
    [policyId: BigNumberish, claimId: BigNumberish],
    [void],
    "nonpayable"
  >;

  denyPolicy: TypedContractMethod<
    [policyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fileClaim: TypedContractMethod<
    [policyId: BigNumberish, description: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllClaimsForAddress: TypedContractMethod<
    [],
    [InsurancePolicy.ClaimStructOutput[]],
    "view"
  >;

  getAllPoliciesForAddress: TypedContractMethod<
    [],
    [InsurancePolicy.PolicyStructOutput[]],
    "view"
  >;

  getPolicy: TypedContractMethod<
    [policyId: BigNumberish],
    [InsurancePolicy.PolicyStructOutput],
    "view"
  >;

  getPolicyCount: TypedContractMethod<[], [bigint], "view">;

  payPremium: TypedContractMethod<[policyId: BigNumberish], [void], "payable">;

  policies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        policyName: string;
        insurer: string;
        insured: string;
        coverageAmount: bigint;
        premium: bigint;
        duration: bigint;
        creationTime: bigint;
        isAnswered: boolean;
        isAccepted: boolean;
        premiumDueDate: bigint;
        period: bigint;
      }
    ],
    "view"
  >;

  policyClaimCounters: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  policyClaims: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, boolean, boolean] & {
        id: bigint;
        policyId: bigint;
        policyName: string;
        description: string;
        amount: bigint;
        isAccepted: boolean;
        isAnswered: boolean;
      }
    ],
    "view"
  >;

  policyCounter: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAndPayClaim"
  ): TypedContractMethod<
    [policyId: BigNumberish, claimId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "acceptPolicy"
  ): TypedContractMethod<[policyId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createPolicy"
  ): TypedContractMethod<
    [
      policyName: string,
      coverageAmount: BigNumberish,
      premium: BigNumberish,
      duration: BigNumberish,
      period: BigNumberish,
      insuredAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "denyClaim"
  ): TypedContractMethod<
    [policyId: BigNumberish, claimId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "denyPolicy"
  ): TypedContractMethod<[policyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fileClaim"
  ): TypedContractMethod<
    [policyId: BigNumberish, description: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllClaimsForAddress"
  ): TypedContractMethod<[], [InsurancePolicy.ClaimStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllPoliciesForAddress"
  ): TypedContractMethod<[], [InsurancePolicy.PolicyStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPolicy"
  ): TypedContractMethod<
    [policyId: BigNumberish],
    [InsurancePolicy.PolicyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPolicyCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payPremium"
  ): TypedContractMethod<[policyId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        policyName: string;
        insurer: string;
        insured: string;
        coverageAmount: bigint;
        premium: bigint;
        duration: bigint;
        creationTime: bigint;
        isAnswered: boolean;
        isAccepted: boolean;
        premiumDueDate: bigint;
        period: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "policyClaimCounters"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "policyClaims"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, boolean, boolean] & {
        id: bigint;
        policyId: bigint;
        policyName: string;
        description: string;
        amount: bigint;
        isAccepted: boolean;
        isAnswered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "policyCounter"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ClaimAccepted"
  ): TypedContractEvent<
    ClaimAcceptedEvent.InputTuple,
    ClaimAcceptedEvent.OutputTuple,
    ClaimAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimDenied"
  ): TypedContractEvent<
    ClaimDeniedEvent.InputTuple,
    ClaimDeniedEvent.OutputTuple,
    ClaimDeniedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFiled"
  ): TypedContractEvent<
    ClaimFiledEvent.InputTuple,
    ClaimFiledEvent.OutputTuple,
    ClaimFiledEvent.OutputObject
  >;
  getEvent(
    key: "ClaimPaid"
  ): TypedContractEvent<
    ClaimPaidEvent.InputTuple,
    ClaimPaidEvent.OutputTuple,
    ClaimPaidEvent.OutputObject
  >;
  getEvent(
    key: "PolicyAccepted"
  ): TypedContractEvent<
    PolicyAcceptedEvent.InputTuple,
    PolicyAcceptedEvent.OutputTuple,
    PolicyAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyCreated"
  ): TypedContractEvent<
    PolicyCreatedEvent.InputTuple,
    PolicyCreatedEvent.OutputTuple,
    PolicyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyDenied"
  ): TypedContractEvent<
    PolicyDeniedEvent.InputTuple,
    PolicyDeniedEvent.OutputTuple,
    PolicyDeniedEvent.OutputObject
  >;
  getEvent(
    key: "PremiumPaid"
  ): TypedContractEvent<
    PremiumPaidEvent.InputTuple,
    PremiumPaidEvent.OutputTuple,
    PremiumPaidEvent.OutputObject
  >;

  filters: {
    "ClaimAccepted(uint256,uint256)": TypedContractEvent<
      ClaimAcceptedEvent.InputTuple,
      ClaimAcceptedEvent.OutputTuple,
      ClaimAcceptedEvent.OutputObject
    >;
    ClaimAccepted: TypedContractEvent<
      ClaimAcceptedEvent.InputTuple,
      ClaimAcceptedEvent.OutputTuple,
      ClaimAcceptedEvent.OutputObject
    >;

    "ClaimDenied(uint256,uint256)": TypedContractEvent<
      ClaimDeniedEvent.InputTuple,
      ClaimDeniedEvent.OutputTuple,
      ClaimDeniedEvent.OutputObject
    >;
    ClaimDenied: TypedContractEvent<
      ClaimDeniedEvent.InputTuple,
      ClaimDeniedEvent.OutputTuple,
      ClaimDeniedEvent.OutputObject
    >;

    "ClaimFiled(uint256,uint256,string,uint256)": TypedContractEvent<
      ClaimFiledEvent.InputTuple,
      ClaimFiledEvent.OutputTuple,
      ClaimFiledEvent.OutputObject
    >;
    ClaimFiled: TypedContractEvent<
      ClaimFiledEvent.InputTuple,
      ClaimFiledEvent.OutputTuple,
      ClaimFiledEvent.OutputObject
    >;

    "ClaimPaid(uint256,uint256)": TypedContractEvent<
      ClaimPaidEvent.InputTuple,
      ClaimPaidEvent.OutputTuple,
      ClaimPaidEvent.OutputObject
    >;
    ClaimPaid: TypedContractEvent<
      ClaimPaidEvent.InputTuple,
      ClaimPaidEvent.OutputTuple,
      ClaimPaidEvent.OutputObject
    >;

    "PolicyAccepted(uint256)": TypedContractEvent<
      PolicyAcceptedEvent.InputTuple,
      PolicyAcceptedEvent.OutputTuple,
      PolicyAcceptedEvent.OutputObject
    >;
    PolicyAccepted: TypedContractEvent<
      PolicyAcceptedEvent.InputTuple,
      PolicyAcceptedEvent.OutputTuple,
      PolicyAcceptedEvent.OutputObject
    >;

    "PolicyCreated(uint256,string,address,address,uint256)": TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;
    PolicyCreated: TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;

    "PolicyDenied(uint256)": TypedContractEvent<
      PolicyDeniedEvent.InputTuple,
      PolicyDeniedEvent.OutputTuple,
      PolicyDeniedEvent.OutputObject
    >;
    PolicyDenied: TypedContractEvent<
      PolicyDeniedEvent.InputTuple,
      PolicyDeniedEvent.OutputTuple,
      PolicyDeniedEvent.OutputObject
    >;

    "PremiumPaid(uint256,uint256)": TypedContractEvent<
      PremiumPaidEvent.InputTuple,
      PremiumPaidEvent.OutputTuple,
      PremiumPaidEvent.OutputObject
    >;
    PremiumPaid: TypedContractEvent<
      PremiumPaidEvent.InputTuple,
      PremiumPaidEvent.OutputTuple,
      PremiumPaidEvent.OutputObject
    >;
  };
}
